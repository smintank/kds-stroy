name: Main KDS-Stroy workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_ENGINE: django.db.backends.postgresql
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: djangopass
          POSTGRES_DB: django
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0 flake8-isort==6.0.0
          pip install -r ./backend/requirements.txt
      - name: Test with flake8
        env:
          POSTGRES_ENGINE: django.db.backends.postgresql
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: djangopass
          POSTGRES_DB: django
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: |
          cd backend/ 
          python -m flake8 .
          python manage.py test

  build_backend_and_push_to_docker_hub:
    name: Push backend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: ./backend/
          push: true
          tags: smintank/kdsstroy_backend:latest

  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: ./nginx/
          push: true
          tags: smintank/kdsstroy_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build_backend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v4
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        password: ${{ secrets.SSH_PASSWORD }}
        source: "docker-compose.yml"
        target: "kds-stroy/"
        overwrite: true
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          cd kds-stroy 
          sudo docker compose -f docker-compose.yml pull
          sudo docker compose -f docker-compose.yml down
          sudo docker volume rm kds-stroy_static
          sudo docker compose -f docker-compose.yml up --build -d 
          sudo docker compose -f docker-compose.yml exec backend python manage.py migrate
          sudo docker compose -f docker-compose.yml exec backend python manage.py collectstatic --noinput
          sudo docker compose -f docker-compose.yml exec backend python manage.py load_cities -al

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Check Deployment Status
        id: check_status
        run: echo "Check service status or deployment logs here"
        continue-on-error: true

      - name: Conditionally Send Telegram Message
        if: steps.check_status.outcome == 'success'
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: "Деплой КДС-Строй успешно выполнен!"

